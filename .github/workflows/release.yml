name: Release Build

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.gitignore'

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: rbxbuild
            
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: rbxbuild
          
          # Linux ARM64/aarch64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: rbxbuild
            
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            artifact_name: rbxbuild
            
          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: rbxbuild
            
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: rbxbuild
            
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: rbxbuild.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from Cargo.toml
        id: get_version
        shell: bash
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | head -n1 | cut -d '"' -f2)
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          echo "Version: v$VERSION"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl tools (Linux musl only)
        if: contains(matrix.target, 'musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Install cross-compilation tools (ARM64 Linux)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Configure cross-compilation (ARM64 Linux)
        if: contains(matrix.target, 'aarch64-unknown-linux')
        run: |
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Linux and macOS)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

      - name: Rename binary with target name
        shell: bash
        run: |
          mkdir -p release-assets
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release-assets/rbxbuild-${{ matrix.target }}.exe
          else
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release-assets/rbxbuild-${{ matrix.target }}
          fi

      - name: Create/Update Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          body: |
            Automated release for version ${{ steps.get_version.outputs.version }}
            
            ## Changes
            - Built from commit ${{ github.sha }}
            
            ## Download
            Download the appropriate binary for your platform below:
            
            ### Linux
            - `rbxbuild-x86_64-unknown-linux-gnu` - x86_64 with glibc (standard)
            - `rbxbuild-x86_64-unknown-linux-musl` - x86_64 static (containers/Alpine)
            - `rbxbuild-aarch64-unknown-linux-gnu` - ARM64 with glibc
            - `rbxbuild-aarch64-unknown-linux-musl` - ARM64 static (containers/Alpine)
            
            ### macOS
            - `rbxbuild-x86_64-apple-darwin` - Intel Macs
            - `rbxbuild-aarch64-apple-darwin` - Apple Silicon (M1/M2/M3)
            
            ### Windows
            - `rbxbuild-x86_64-pc-windows-msvc.exe` - Windows x64
          draft: false
          prerelease: false
          files: release-assets/*
